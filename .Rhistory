source("p_val.R")
get_CI <- function(alpha, lower_bds, upper_bds, j, seeds, G, s_obs, tol, t_init = NULL, T_stat = ma_depth) {
# j indicates that we're computing the confidence interval for the jth parameter
# tol represents the allowed tolerance on the boundary of our interval
# T_stat is default to ma_depth as defined in the p_val file
# use the p_value function to identify the best starting point for bisection, if there exits any
general_search <- p_value(lower_bds, upper_bds, seeds, G, s_obs, t_init, T_stat)
if (general_search$p_val > alpha) {
# use the jth coordinate of theta_hat as the starting point for bisection
beta_init <- general_search$theta_hat[j]
# define the sub_search function which returns whether or not a given interval contains a valid point
sub_search <- function(beta_left, beta_right) {
updated_lower <- lower_bds
updated_lower[j] <- beta_left
updated_upper <- upper_bds
updated_upper[j] <- beta_right
# call the accept function to see if (beta_left, beta_right) contains a valid point
return(accept(alpha, updated_lower, updated_upper, seeds, G, s_obs, T_stat))
}
# bisection to find the left boundary
bisect_left <- function(beta_left, beta_right) {
left <- beta_left
right <- beta_right
right_previous <- beta_right
while (right-left > tol/2) {
if (sub_search(left, right)) {
right_previous <- right
right <- (left + right)/2
} else {
left <- right
right <- (right + right_previous)/2
}
}
return(left)
}
# bisection to find the right boundary
bisect_right <- function(beta_left, beta_right) {
left <- beta_left
left_previous <- beta_left
right <- beta_right
while (right-left > tol/2) {
if (sub_search(left, right)) {
left_previous <- left
left <- (left + right)/2
} else {
right <- left
left <- (left_previous + left)/2
}
}
return(right)
}
# use bisect_left and bisect_right to compute the left/right boundaries
beta_L <- bisect_left(lower_bds[j], beta_init)
beta_R <- bisect_right(beta_init, upper_bds[j])
return(c(beta_L, beta_R))
} else {
return(NULL) # no point in the parameter space is likely, so return the empty set
}
}
?p_value
p_value(x,)
source("s_sample")
source("s_sample.R")
source("p_val.R")
source("get_CI.R")
source("s_sample.R")
source("p_val.R")
source("get_CI.R")
source("s_sample.R")
rm(list())
rm(list=ls())
source("s_sample.R")
source("p_val.R")
source("get_CI.R")
?qnorm
qnorm(0)
qnorm(0.5)
qnorm(68)
qnorm(0.68)
qnorm(1.01)
qnorm(-0.01)
runif()
runif(1)
runif(10)
?matrix
seeds <- matrix(data = runif(R))
# Repro sample size R
R <- 200
seeds <- matrix(data = runif(R))
seeds
seeds[1,]
seeds[,1]
10^-1
qnorm(1-0.05/2)
?qnomr
?qnorm
normal_CI <- function(data, sample_size, alpha) {
z <- qnorm(1 - alpha/2)
x_bar <- mean(data)
half_width <- z/sqrt(sample_size)
interval <- c(x_bar - half_width, x_bar + half_width)
return(interval)
}
normal_CI(c(1,2,3,2,3,2,1),7,0.05)
rnorm
?rnom
?rnorm
data <- rnorm(n = sample_size,
mean = mu,
sd = sigma)
rm(list = ls())
source("s_sample.R")
source("p_val.R")
source("get_CI.R")
sample_size <- 50 # sample size
n <- 100 # sample size
R <- 200 # Repro sample size R
alpha <- .05 # significance level
tol <- 10^-4
mu <- 1
sigma <- 1
seeds <- matrix(data = runif(R)) # 200 pre-generated seeds
normal_CI <- function(data, alpha) {
z <- qnorm(1 - alpha/2)
x_bar <- mean(data)
sample_size <- length(data)
half_width <- z/sqrt(sample_size)
interval <- c(x_bar - half_width, x_bar + half_width)
return(interval)
}
data <- rnorm(n = sample_size,
mean = mu,
sd = sigma)
data
classical_CI <- normal_CI(data, alpha)
classical_CI
Repro_CI <- get_CI(alpha, c(-10,0), c(10,10), 1, seeds, s_sample, s_obs, tol)
s_obs <- mean(data)
Repro_CI <- get_CI(alpha, c(-10,0), c(10,10), 1, seeds, s_sample, s_obs, tol)
?optim
source("s_sample.R")
source("p_val.R")
source("get_CI.R")
Repro_CI <- get_CI(alpha, c(-10,0), c(10,10), 1, seeds, s_sample, s_obs, tol)
s_sample(seeds, c(1,1))
seeds
s_sample(seeds, c(1,1))
source("s_sample.R")
# unit testing
s_sample(seeds, c(mu, sigma))
plot(density(repro_data), lwd =2)
# unit testing
repro_data <- s_sample(seeds, c(mu, sigma))
plot(density(repro_data), lwd =2)
plot(density(data), lwd =2)
plot(density(repro_data), lwd =2)
plot(density(repro_data), lwd =1)
plot(density(repro_data), lwd =2)
data <- rnorm(n = sample_size,
mean = mu,
sd = sigma)
s_obs <- mean(data)
plot(density(data), lwd = 2)
data <- rnorm(n = sample_size,
mean = mu,
sd = sigma)
s_obs <- mean(data)
data <- rnorm(n = sample_size,
mean = mu,
sd = sigma)
s_obs <- mean(data)
plot(density(data), lwd = 2)
sample_size <- 100 # sample size
data <- rnorm(n = sample_size,
mean = mu,
sd = sigma)
s_obs <- mean(data)
plot(density(data), lwd = 2)
# unit testing
repro_data <- s_sample(seeds, c(mu, sigma))
# unit testing
repro_data <- s_sample(seeds, c(mu, sigma))
plot(density(data), lwd = 2)
plot(density(repro_data), lwd = 2)
Repro_CI <- get_CI(alpha, c(-10,0), c(10,10), 1, seeds, s_sample, s_obs, tol)
accept(alpha, c(-10,0), c(10,10), seeds, s_sample, s_obs)
source("p_val.R")
accept(alpha, c(-10,0), c(10,10), seeds, s_sample, s_obs)
accept(alpha, c(-1,0), c(10,2), seeds, s_sample, s_obs)
accept(alpha, c(-1,1.3), c(10,2), seeds, s_sample, s_obs)
accept(alpha, c(-1,1.5), c(10,2), seeds, s_sample, s_obs)
accept(alpha, c(-1,2), c(10,2), seeds, s_sample, s_obs)
accept(alpha, c(-1,1.9), c(10,2), seeds, s_sample, s_obs)
accept(alpha, c(5,1.9), c(10,2), seeds, s_sample, s_obs)
accept(alpha, c(5,0.5), c(10,2), seeds, s_sample, s_obs)
accept(alpha, c(2,0.5), c(10,2), seeds, s_sample, s_obs)
# this is the confidence interval generated by Repro sampling
Repro_CI <- get_CI(alpha, c(-10,0), c(10,10), 1, seeds, s_sample, s_obs, tol)
p_value(c(2,0.5), c(10,2), seeds, s_sample, s_obs)
p_value(c(3,0.5), c(10,2), seeds, s_sample, s_obs)
p_value(c(3,0.5), c(10,2), seeds, s_sample, s_obs)
p_value(c(3,0.5), c(10,2), seeds, s_sample, s_obs)
p_value(c(5,0.5), c(10,2), seeds, s_sample, s_obs)
classical_CI
p_value(c(5,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(2,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(3,0.9), c(10,1.1), seeds, s_sample, s_obs)
# this is the confidence interval generated by Repro sampling
Repro_CI <- get_CI(alpha, c(-10,0), c(10,10), 1, seeds, s_sample, s_obs, tol)
p_value(c(3,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(4,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(-4,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(-2,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(-1,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(1,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(1,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(2,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(1.1,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(1.2,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(1.3,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(1,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(0.9,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(0.4,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(0.3,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(1,0.9), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(1,0.3), c(10,1.1), seeds, s_sample, s_obs)
p_value(c(1,0.3), c(10,1.2), seeds, s_sample, s_obs)
p_value(c(1,0.3), c(10,1.3), seeds, s_sample, s_obs)
p_value(c(1,0.3), c(10,1.4), seeds, s_sample, s_obs)
p_value(c(1,0.3), c(10,10), seeds, s_sample, s_obs)
p_value(c(1,0.3), c(10,20), seeds, s_sample, s_obs)
classical_CI <- normal_CI(data, alpha)
# this is the confidence interval generated by Repro sampling
Repro_CI <- get_CI(alpha, c(-10,0), c(10,10), 1, seeds, s_sample, s_obs, tol)
traceback()
source("p_val.R")
get_CI <- function(alpha, lower_bds, upper_bds, j, seeds, G, s_obs, tol, t_init = NULL, T_stat = ma_depth) {
# j indicates that we're computing the confidence interval for the jth parameter
# tol represents the allowed tolerance on the boundary of our interval
# T_stat is default to ma_depth as defined in the p_val file
# use the p_value function to identify the best starting point for bisection, if there exits any
general_search <- p_value(lower_bds, upper_bds, seeds, G, s_obs, t_init, T_stat)
if (general_search$p_val > alpha) {
# use the jth coordinate of theta_hat as the starting point for bisection
beta_init <- general_search$theta_hat[j]
# define the sub_search function which returns whether or not a given interval contains a valid point
sub_search <- function(beta_left, beta_right) {
updated_lower <- lower_bds
updated_lower[j] <- beta_left
updated_upper <- upper_bds
updated_upper[j] <- beta_right
# call the accept function to see if (beta_left, beta_right) contains a valid point
return(accept(alpha, updated_lower, updated_upper, seeds, G, s_obs, T_stat))
}
# bisection to find the left boundary
bisect_left <- function(beta_left, beta_right) {
left <- beta_left
right <- beta_right
right_previous <- beta_right
while (right-left > tol/2) {
if (sub_search(left, right)) {
right_previous <- right
right <- (left + right)/2
} else {
left <- right
right <- (right + right_previous)/2
}
}
return(left)
}
# bisection to find the right boundary
bisect_right <- function(beta_left, beta_right) {
left <- beta_left
left_previous <- beta_left
right <- beta_right
while (right-left > tol/2) {
if (sub_search(left, right)) {
left_previous <- left
left <- (left + right)/2
} else {
right <- left
left <- (left_previous + left)/2
}
}
return(right)
}
# use bisect_left and bisect_right to compute the left/right boundaries
beta_L <- bisect_left(lower_bds[j], beta_init)
beta_R <- bisect_right(beta_init, upper_bds[j])
return(c(beta_L, beta_R))
} else {
return(NULL) # no point in the parameter space is likely, so return the empty set
}
}
# import this library for Mahalnobis depth
library(ddalpha)
# the Mahalanobis depth (modified to also take in a parameter theta)
# x: each row of x is a vector whose distance we want to compute,
# data: an (R+1) by d matrix containing (R+1) vectors
ma_depth <- function(x, data, theta) {
return(depth.Mahalanobis(x, data))
}
# test case for ma_depth
data_test <- matrix(data = rnorm(50),
nrow = 10,
ncol =5)
x_test <- data_test[1:2,]
ma_depth(x_test, data_test, 0)
# p_value function
p_value <- function(lower_bds, upper_bds, seeds, G, s_obs, t_init = NULL, T_stat = ma_depth) {
# extract the number of seeds R
R <- dim(seeds)[1]
d <- length(s_obs)
# a function that generate R simulated values using the seeds and G, store s_obs and s_sim in an R+1 by d matrix
s <- function(theta) {
s_values <- rbind(s_obs, G(seeds, theta))
return(s_values)
}
# function that computes and stores the simulated statistics using T_stat
statistics <- function(theta) {
s_matrix <- s(theta)
t_vec <- T_stat(s_matrix, s_matrix, theta)
}
# define the counting function that we feed into optim
count <- function(theta) {
t_values <- statistics(theta)
ct <- sum(t_values[-1] <= t_values[1]) + t_values[1]
return(-ct)
}
# pick the midpoint if t_init is not specified
if (is.null(t_init)) {
t_init <- (lower_bds + upper_bds)/2
}
# finding the largest
opt <- optim(par = t_init,
fn = count,
method = "L-BFGS-B",
lower = lower_bds,
upper = upper_bds)
m <- -opt$value
theta_hat <- opt$par
# compute the p value and return
p_val <- 1/(R+1) * min(floor(m)+1, R+1)
# compile a list of values to return
results <- list(p_val = p_val,
rank = floor(m)+1,
theta_hat = theta_hat)
return(results)
}
# accept function
accept <- function(alpha, lower_bds, upper_bds, seeds, G, s_obs, t_init = NULL, T_stat = ma_depth) {
# calling the p_value function as a subroutine
p_val <- p_value(lower_bds, upper_bds, seeds, G, s_obs, t_init, T_stat)$p_val
# return true if we fail to reject
return(p_val > alpha)
}
source("s_sample.R")
source("p_val.R")
source("get_CI.R")
# this is the confidence interval generated by Repro sampling
Repro_CI <- get_CI(alpha, c(-10,0), c(10,10), 1, seeds, s_sample, s_obs, tol)
traceback()
p_value(c(1,0.3), c(10,20), seeds, s_sample, s_obs)
p_value(c(1,0.3), c(10,5), seeds, s_sample, s_obs)
